.. _syntax:

Syntax
******

Overview
========

For a quick glance at what creoleparser implements, see the
`creoleparser cheatsheet <http://purl.oclc.org/creoleparser/cheatsheet>`_.

Creoleparser adhers very closely to the basic `Creole 1.0 specification <http://wikicreole.org/wiki/Creole1.0>`_
and optionally implements most `additions <http://wiki.wikicreole.org/Creole%201.0/additions>`_ (not including
alternate link sytax). These pages should be refered to for full details on the syntax. 

Below find extra syntax features of creoleparser.

Mixed Lists
===========

Creoleparser allows nesting of ordered lists within unordered lists (and visa versa) to any depth.
Creole 1.0 does not specify or suggest a syntax for mixed list support. The following is the
creoleparser implementation::

   # this is list item one
   ** unordered subitem 1
   ** unordered subitem 2
   # item two
   ** unordered subitem 1
   ** unordered subitem 2
   # item three

Macros
======

Creoleparser supports the same macro syntax as suggested by Creole, e.g.,::

   <<CurrentTimePlugin format='yyyy.MM.dd'>>

In addition to the above, creoleparser supports *macros with bodies*, e.g.,::

   <<foo>>Some content to process<</foo>>

An argument string can also be supplied::

   <<foo boo="goo" >>Some content to process<</foo>>

Normally, *bodied* macros will not span other block-level markup (like tables)
or blank lines. This can be forced however, using the following syntax::
   
   <<foo>>
   Some content for foo.

   Including a second paragraph.
   <</foo>>
              
Note that both the opening and closing markup are on a line by themselves
and have no leading spaces. This is analogous to a Creole pre block::

   {{{
   Some content to render in a <pre>.

   Including a second paragraph.   
   }}}

Macro Names
-----------
A macro name must start with a letter and can include letters, numbers,
and non-repeating periods and hyphens.

Macro Arguments and Delimiters
------------------------------

Internally, the entire string from the `macro_name` to the ``>>`` is passed as
the `arg_string`, so an implementation is free to choose the syntax. It is
recommended, however, to use syntax of the
:ref:`the built-in argument parser <arg_parser>`.





